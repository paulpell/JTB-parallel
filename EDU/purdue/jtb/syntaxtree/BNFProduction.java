//
// Generated by JTB 1.3.1
//

package EDU.purdue.jtb.syntaxtree;

/**
 * Grammar production:
 * f0 -> ResultType()
 * f1 -> <IDENTIFIER>
 * f2 -> FormalParameters()
 * f3 -> <COLON>
 * f4 -> "{"
 * f5 -> ( BlockStatement() )*
 * f6 -> "}"
 * f7 -> <LBRACE>
 * f8 -> ExpansionChoices()
 * f9 -> <RBRACE>
 */
public class BNFProduction implements Node {
   public ResultType f0;
   public NodeToken f1;
   public FormalParameters f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeListOptional f5;
   public NodeToken f6;
   public NodeToken f7;
   public ExpansionChoices f8;
   public NodeToken f9;

   public BNFProduction(ResultType n0, NodeToken n1, FormalParameters n2, NodeToken n3, NodeToken n4, NodeListOptional n5, NodeToken n6, NodeToken n7, ExpansionChoices n8, NodeToken n9) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
   }

   public BNFProduction(ResultType n0, NodeToken n1, FormalParameters n2, NodeListOptional n3, ExpansionChoices n4) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = new NodeToken(":");
      f4 = new NodeToken("{");
      f5 = n3;
      f6 = new NodeToken("}");
      f7 = new NodeToken("{");
      f8 = n4;
      f9 = new NodeToken("}");
   }

   public void accept(EDU.purdue.jtb.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(EDU.purdue.jtb.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(EDU.purdue.jtb.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(EDU.purdue.jtb.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

